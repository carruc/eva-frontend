{"ast":null,"code":"// API service for Heat of the Day application\n// Handles all backend communication and error management\n// EXPANDED to support PurpLLe backend features\n\nconst BASE_URL = '/api';\nclass ApiError extends Error {\n  constructor(message, status, data) {\n    super(message);\n    this.name = 'ApiError';\n    this.status = status;\n    this.data = data;\n  }\n}\nconst handleResponse = async response => {\n  if (!response.ok) {\n    let errorMessage = 'Network error occurred';\n    try {\n      const errorData = await response.json();\n      errorMessage = errorData.error || errorMessage;\n    } catch {\n      // If JSON parsing fails, use default message\n    }\n    throw new ApiError(errorMessage, response.status);\n  }\n\n  // Handle 204 No Content responses\n  if (response.status === 204) {\n    return null;\n  }\n  try {\n    return await response.json();\n  } catch {\n    throw new ApiError('Invalid response format', response.status);\n  }\n};\nconst makeRequest = async (url, options = {}) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  if (config.body && typeof config.body !== 'string') {\n    config.body = JSON.stringify(config.body);\n  }\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, config);\n    return await handleResponse(response);\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    throw new ApiError('Network connection failed', 0);\n  }\n};\nconst makeFormRequest = async (url, formData) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, {\n      method: 'POST',\n      body: formData\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    throw new ApiError('Network connection failed', 0);\n  }\n};\nexport const apiService = {\n  // ======================================\n  // PROJECT ENDPOINTS - Enhanced with PurpLLe features\n  // ======================================\n\n  async getProjects() {\n    return makeRequest('/projects');\n  },\n  async getProject(projectId) {\n    return makeRequest(`/projects/${projectId}`);\n  },\n  async createProject(projectData) {\n    var _projectData$metrics, _projectData$metrics2, _projectData$metrics3;\n    return makeRequest('/projects', {\n      method: 'POST',\n      body: {\n        title: projectData.name,\n        // Map 'name' to 'title' for PurpLLe compatibility\n        motivations: projectData.motivations || [],\n        overall_performance: (_projectData$metrics = projectData.metrics) === null || _projectData$metrics === void 0 ? void 0 : _projectData$metrics.overallPerformance,\n        difficulty: (_projectData$metrics2 = projectData.metrics) === null || _projectData$metrics2 === void 0 ? void 0 : _projectData$metrics2.difficulty,\n        interest: (_projectData$metrics3 = projectData.metrics) === null || _projectData$metrics3 === void 0 ? void 0 : _projectData$metrics3.interest,\n        ...projectData\n      }\n    });\n  },\n  async updateProject(projectId, updates) {\n    return makeRequest(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  },\n  async deleteProject(projectId) {\n    return makeRequest(`/projects/${projectId}`, {\n      method: 'DELETE'\n    });\n  },\n  // ======================================\n  // DOCUMENT MANAGEMENT ENDPOINTS - NEW\n  // ======================================\n\n  async getProjectDocuments(projectId) {\n    return makeRequest(`/projects/${projectId}/documents`);\n  },\n  async getDocument(projectId, documentId) {\n    return makeRequest(`/projects/${projectId}/documents/${documentId}`);\n  },\n  async uploadDocument(projectId, file, category = 'RESOURCE') {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('category', category);\n    return makeFormRequest(`/projects/${projectId}/documents`, formData);\n  },\n  async downloadDocument(projectId, documentId) {\n    const response = await fetch(`${BASE_URL}/projects/${projectId}/documents/${documentId}/download`);\n    if (!response.ok) {\n      throw new ApiError('Failed to download document', response.status);\n    }\n    return response.blob();\n  },\n  // ======================================\n  // MILESTONE ENDPOINTS - Enhanced from events\n  // ======================================\n\n  async getProjectMilestones(projectId) {\n    return makeRequest(`/projects/${projectId}/milestones`);\n  },\n  async getMilestone(projectId, milestoneId) {\n    return makeRequest(`/projects/${projectId}/milestones/${milestoneId}`);\n  },\n  async createMilestone(projectId, milestoneData) {\n    return makeRequest(`/projects/${projectId}/milestones`, {\n      method: 'POST',\n      body: {\n        title: milestoneData.name,\n        date: milestoneData.date,\n        isDeadline: milestoneData.type === 'deadline',\n        ...milestoneData\n      }\n    });\n  },\n  async updateMilestone(projectId, milestoneId, updates) {\n    return makeRequest(`/projects/${projectId}/milestones/${milestoneId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  },\n  async deleteMilestone(projectId, milestoneId) {\n    return makeRequest(`/projects/${projectId}/milestones/${milestoneId}`, {\n      method: 'DELETE'\n    });\n  },\n  // ======================================\n  // LEARNING SESSION ENDPOINTS - NEW\n  // ======================================\n\n  async getProjectSessions(projectId) {\n    return makeRequest(`/projects/${projectId}/sessions`);\n  },\n  async getSession(projectId, sessionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}`);\n  },\n  async createLearningSession(projectId, sessionData) {\n    var _sessionData$metrics, _sessionData$metrics2, _sessionData$metrics3, _sessionData$metrics4, _sessionData$metrics5;\n    return makeRequest(`/projects/${projectId}/sessions`, {\n      method: 'POST',\n      body: {\n        durationMinutes: sessionData.durationMinutes,\n        motivation: sessionData.motivation,\n        learningObjective: sessionData.learningObjective,\n        metrics: {\n          awarenessLevel: (_sessionData$metrics = sessionData.metrics) === null || _sessionData$metrics === void 0 ? void 0 : _sessionData$metrics.awarenessLevel,\n          confidenceLevel: (_sessionData$metrics2 = sessionData.metrics) === null || _sessionData$metrics2 === void 0 ? void 0 : _sessionData$metrics2.confidenceLevel,\n          energyLevel: (_sessionData$metrics3 = sessionData.metrics) === null || _sessionData$metrics3 === void 0 ? void 0 : _sessionData$metrics3.energyLevel,\n          performanceLevel: (_sessionData$metrics4 = sessionData.metrics) === null || _sessionData$metrics4 === void 0 ? void 0 : _sessionData$metrics4.performanceLevel,\n          satisfactionLevel: (_sessionData$metrics5 = sessionData.metrics) === null || _sessionData$metrics5 === void 0 ? void 0 : _sessionData$metrics5.satisfactionLevel\n        },\n        ...sessionData\n      }\n    });\n  },\n  async addDocumentsToSession(projectId, sessionId, documentData) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/documents`, {\n      method: 'POST',\n      body: {\n        resourceDocumentIds: documentData.resourceDocumentIds || [],\n        testDocumentIds: documentData.testDocumentIds || []\n      }\n    });\n  },\n  async updateSession(projectId, sessionId, updates) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  },\n  async deleteSession(projectId, sessionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}`, {\n      method: 'DELETE'\n    });\n  },\n  // ======================================\n  // QUESTION MANAGEMENT ENDPOINTS - NEW\n  // ======================================\n\n  async getSessionQuestions(projectId, sessionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions`);\n  },\n  async createQuestion(projectId, sessionId, questionData) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions`, {\n      method: 'POST',\n      body: {\n        question: questionData.question,\n        answer: questionData.answer,\n        correction: questionData.correction,\n        evaluation: questionData.evaluation,\n        testDocumentId: questionData.testDocumentId,\n        resourceDocumentIds: questionData.resourceDocumentIds || [],\n        references: questionData.references || [],\n        ...questionData\n      }\n    });\n  },\n  async updateQuestion(projectId, sessionId, questionId, updates) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions/${questionId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  },\n  async deleteQuestion(projectId, sessionId, questionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions/${questionId}`, {\n      method: 'DELETE'\n    });\n  },\n  // ======================================\n  // LEGACY COMPATIBILITY - Map to PurpLLe\n  // ======================================\n\n  // Events mapped to Milestones for backward compatibility\n  async getEvents(projectId = null) {\n    if (projectId) {\n      const milestones = await this.getProjectMilestones(projectId);\n      return milestones.map(milestone => ({\n        id: milestone.id,\n        name: milestone.title,\n        projectId: projectId,\n        date: milestone.date,\n        type: milestone.isDeadline ? 'deadline' : 'milestone',\n        createdAt: milestone.date\n      }));\n    }\n\n    // For all events, we'd need to iterate through all projects\n    const projects = await this.getProjects();\n    const allEvents = [];\n    for (const project of projects) {\n      const milestones = await this.getProjectMilestones(project.id);\n      milestones.forEach(milestone => {\n        allEvents.push({\n          id: milestone.id,\n          name: milestone.title,\n          projectId: project.id,\n          date: milestone.date,\n          type: milestone.isDeadline ? 'deadline' : 'milestone',\n          createdAt: milestone.date\n        });\n      });\n    }\n    return allEvents;\n  },\n  async createEvent(eventData) {\n    return this.createMilestone(eventData.projectId, {\n      name: eventData.name,\n      date: eventData.date,\n      type: eventData.type\n    });\n  },\n  async updateEvent(eventId, updates) {\n    // This would require knowing the project ID, which we don't have in the legacy API\n    // For now, return a compatibility error\n    throw new ApiError('Event updates require migration to milestone-based API', 400);\n  },\n  async deleteEvent(eventId) {\n    // Similar issue - we need project context\n    throw new ApiError('Event deletion requires migration to milestone-based API', 400);\n  },\n  // Tasks mapped to Learning Sessions for backward compatibility\n  async getTasks(projectId = null) {\n    if (projectId) {\n      const sessions = await this.getProjectSessions(projectId);\n      return sessions.map(session => {\n        var _session$metrics;\n        return {\n          id: session.id,\n          name: session.learningObjective || `Session ${session.durationMinutes}min`,\n          projectId: projectId,\n          eventId: null,\n          completed: ((_session$metrics = session.metrics) === null || _session$metrics === void 0 ? void 0 : _session$metrics.performanceLevel) > 70,\n          // Arbitrary completion threshold\n          createdAt: session.timestamp\n        };\n      });\n    }\n    const projects = await this.getProjects();\n    const allTasks = [];\n    for (const project of projects) {\n      const sessions = await this.getProjectSessions(project.id);\n      sessions.forEach(session => {\n        var _session$metrics2;\n        allTasks.push({\n          id: session.id,\n          name: session.learningObjective || `Session ${session.durationMinutes}min`,\n          projectId: project.id,\n          eventId: null,\n          completed: ((_session$metrics2 = session.metrics) === null || _session$metrics2 === void 0 ? void 0 : _session$metrics2.performanceLevel) > 70,\n          createdAt: session.timestamp\n        });\n      });\n    }\n    return allTasks;\n  },\n  async createTask(taskData) {\n    return this.createLearningSession(taskData.projectId, {\n      learningObjective: taskData.name,\n      durationMinutes: 30,\n      // Default duration\n      motivation: 'Created from task'\n    });\n  },\n  async updateTask(taskId, updates) {\n    throw new ApiError('Task updates require migration to session-based API', 400);\n  },\n  async deleteTask(taskId) {\n    throw new ApiError('Task deletion requires migration to session-based API', 400);\n  },\n  // Analytics endpoints for heatmap visualization - Enhanced with learning data\n  async getHeatmapData(startDate = null, endDate = null, timeScale = 1) {\n    const projects = await this.getProjects();\n    const heatmapData = {};\n    for (const project of projects) {\n      const sessions = await this.getProjectSessions(project.id);\n      heatmapData[project.id] = {\n        project: {\n          id: project.id,\n          name: project.title,\n          color: project.color || '#3B82F6',\n          // Default color\n          hidden: project.hidden || false,\n          order: project.order || 0,\n          createdAt: project.createdAt\n        },\n        data: {}\n      };\n\n      // Convert sessions to heatmap data\n      sessions.forEach(session => {\n        const date = new Date(session.timestamp).toISOString().split('T')[0];\n        if (!heatmapData[project.id].data[date]) {\n          heatmapData[project.id].data[date] = 0;\n        }\n        // Use session duration as intensity metric\n        heatmapData[project.id].data[date] += session.durationMinutes;\n      });\n    }\n    return heatmapData;\n  }\n};\n\n// Helper functions for data processing - ENHANCED\nexport const dataUtils = {\n  // Enhanced project utilities\n  sortProjects(projects) {\n    return [...projects].sort((a, b) => a.order - b.order);\n  },\n  getVisibleProjects(projects) {\n    return projects.filter(p => !p.hidden);\n  },\n  getHiddenProjects(projects) {\n    return projects.filter(p => p.hidden);\n  },\n  // Document utilities - NEW\n  getProjectDocuments(documents, projectId) {\n    return documents.filter(d => d.projectId === projectId);\n  },\n  getResourceDocuments(documents) {\n    return documents.filter(d => d.category === 'RESOURCE');\n  },\n  getTestDocuments(documents) {\n    return documents.filter(d => d.category === 'TEST');\n  },\n  // Learning session utilities - NEW\n  getProjectSessions(sessions, projectId) {\n    return sessions.filter(s => s.projectId === projectId);\n  },\n  getSessionsByDateRange(sessions, startDate, endDate) {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    return sessions.filter(session => {\n      const sessionDate = new Date(session.timestamp);\n      return sessionDate >= start && sessionDate <= end;\n    });\n  },\n  getTotalStudyTime(sessions) {\n    return sessions.reduce((total, session) => total + session.durationMinutes, 0);\n  },\n  getAverageSessionMetrics(sessions) {\n    if (sessions.length === 0) return null;\n    const totals = sessions.reduce((acc, session) => {\n      if (session.metrics) {\n        acc.awarenessLevel += session.metrics.awarenessLevel || 0;\n        acc.confidenceLevel += session.metrics.confidenceLevel || 0;\n        acc.energyLevel += session.metrics.energyLevel || 0;\n        acc.performanceLevel += session.metrics.performanceLevel || 0;\n        acc.satisfactionLevel += session.metrics.satisfactionLevel || 0;\n        acc.count += 1;\n      }\n      return acc;\n    }, {\n      awarenessLevel: 0,\n      confidenceLevel: 0,\n      energyLevel: 0,\n      performanceLevel: 0,\n      satisfactionLevel: 0,\n      count: 0\n    });\n    if (totals.count === 0) return null;\n    return {\n      awarenessLevel: totals.awarenessLevel / totals.count,\n      confidenceLevel: totals.confidenceLevel / totals.count,\n      energyLevel: totals.energyLevel / totals.count,\n      performanceLevel: totals.performanceLevel / totals.count,\n      satisfactionLevel: totals.satisfactionLevel / totals.count\n    };\n  },\n  // Question utilities - NEW\n  getSessionQuestions(questions, sessionId) {\n    return questions.filter(q => q.sessionId === sessionId);\n  },\n  getQuestionsByEvaluation(questions, minEvaluation = 0) {\n    return questions.filter(q => q.evaluation >= minEvaluation);\n  },\n  getAverageQuestionEvaluation(questions) {\n    if (questions.length === 0) return 0;\n    const total = questions.reduce((sum, q) => sum + (q.evaluation || 0), 0);\n    return total / questions.length;\n  },\n  // Milestone utilities - Enhanced from events\n  getProjectMilestones(milestones, projectId) {\n    return milestones.filter(m => m.projectId === projectId);\n  },\n  getProjectDeadline(milestones, projectId) {\n    return milestones.find(m => m.projectId === projectId && m.isDeadline);\n  },\n  getUpcomingMilestones(milestones, daysAhead = 30) {\n    const now = new Date();\n    const future = new Date();\n    future.setDate(now.getDate() + daysAhead);\n    return milestones.filter(m => {\n      const milestoneDate = new Date(m.date);\n      return milestoneDate >= now && milestoneDate <= future;\n    }).sort((a, b) => new Date(a.date) - new Date(b.date));\n  },\n  // Legacy compatibility\n  getProjectTasks(sessions, projectId) {\n    return this.getProjectSessions(sessions, projectId);\n  },\n  getProjectEvents(milestones, projectId) {\n    return this.getProjectMilestones(milestones, projectId);\n  },\n  getCompletedTasksCount(sessions, projectId, date) {\n    const projectSessions = this.getProjectSessions(sessions, projectId);\n    return projectSessions.filter(session => {\n      var _session$metrics3;\n      if (!((_session$metrics3 = session.metrics) !== null && _session$metrics3 !== void 0 && _session$metrics3.performanceLevel) || session.metrics.performanceLevel <= 70) return false;\n      const sessionDate = new Date(session.timestamp).toDateString();\n      const targetDate = new Date(date).toDateString();\n      return sessionDate === targetDate;\n    }).length;\n  },\n  getEventsForDate(milestones, date) {\n    const targetDate = new Date(date);\n    const targetDateString = targetDate.getFullYear() + '-' + String(targetDate.getMonth() + 1).padStart(2, '0') + '-' + String(targetDate.getDate()).padStart(2, '0');\n    return milestones.filter(milestone => {\n      const milestoneDate = new Date(milestone.date);\n      const milestoneDateString = milestoneDate.getFullYear() + '-' + String(milestoneDate.getMonth() + 1).padStart(2, '0') + '-' + String(milestoneDate.getDate()).padStart(2, '0');\n      return milestoneDateString === targetDateString;\n    });\n  },\n  // Enhanced heatmap utilities\n  getHeatmapIntensity(studyMinutes, maxMinutes = 180) {\n    // 3 hours max\n    return Math.min(studyMinutes / maxMinutes, 1);\n  },\n  getHeatmapCellColor(projectColor, intensity) {\n    const hex = projectColor.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    const opacity = Math.max(0.1, intensity);\n    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n  },\n  // Date formatting utilities\n  formatDate(date, format = 'short') {\n    const d = new Date(date);\n    switch (format) {\n      case 'short':\n        const day = d.getDate().toString().padStart(2, '0');\n        const month = (d.getMonth() + 1).toString().padStart(2, '0');\n        return `${day}/${month}`;\n      case 'long':\n        const longDay = d.getDate().toString().padStart(2, '0');\n        const longMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const year = d.getFullYear();\n        const weekday = d.toLocaleDateString('en-US', {\n          weekday: 'long'\n        });\n        return `${weekday}, ${longDay}/${longMonth}/${year}`;\n      case 'date-only':\n        const dateDay = d.getDate().toString().padStart(2, '0');\n        const dateMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const dateYear = d.getFullYear();\n        return `${dateDay}/${dateMonth}/${dateYear}`;\n      case 'time':\n        return d.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      case 'datetime':\n        const dtDay = d.getDate().toString().padStart(2, '0');\n        const dtMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const dtYear = d.getFullYear();\n        const time = d.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n        return `${dtDay}/${dtMonth}/${dtYear} ${time}`;\n      default:\n        const defDay = d.getDate().toString().padStart(2, '0');\n        const defMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const defYear = d.getFullYear();\n        return `${defDay}/${defMonth}/${defYear}`;\n    }\n  },\n  generateDateRange(centerDate, timeScale, daysToShow = 30) {\n    const dates = [];\n    const center = new Date(centerDate);\n    const startDate = new Date(center);\n    startDate.setDate(center.getDate() - 7);\n    for (let i = 0; i < daysToShow; i += timeScale) {\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      dates.push(new Date(date));\n    }\n    return dates;\n  },\n  // Validation utilities\n  hasDeadline(milestones, projectId) {\n    return milestones.some(m => m.projectId === projectId && m.isDeadline);\n  },\n  validateTaskEventAssignment(task, event) {\n    if (!event) return true;\n    return task.projectId === event.projectId;\n  },\n  // New validation utilities for PurpLLe features\n  validateDocumentCategory(category) {\n    return ['RESOURCE', 'TEST'].includes(category.toUpperCase());\n  },\n  validateSessionMetrics(metrics) {\n    const validKeys = ['awarenessLevel', 'confidenceLevel', 'energyLevel', 'performanceLevel', 'satisfactionLevel'];\n    for (const key of validKeys) {\n      if (metrics[key] !== undefined && (metrics[key] < 0 || metrics[key] > 100)) {\n        return false;\n      }\n    }\n    return true;\n  },\n  validateProjectMetrics(metrics) {\n    const validKeys = ['overallPerformance', 'difficulty', 'interest'];\n    for (const key of validKeys) {\n      if (metrics[key] !== undefined && (metrics[key] < 0 || metrics[key] > 100)) {\n        return false;\n      }\n    }\n    return true;\n  }\n};","map":{"version":3,"names":["BASE_URL","ApiError","Error","constructor","message","status","data","name","handleResponse","response","ok","errorMessage","errorData","json","error","makeRequest","url","options","config","headers","body","JSON","stringify","fetch","makeFormRequest","formData","method","apiService","getProjects","getProject","projectId","createProject","projectData","_projectData$metrics","_projectData$metrics2","_projectData$metrics3","title","motivations","overall_performance","metrics","overallPerformance","difficulty","interest","updateProject","updates","deleteProject","getProjectDocuments","getDocument","documentId","uploadDocument","file","category","FormData","append","downloadDocument","blob","getProjectMilestones","getMilestone","milestoneId","createMilestone","milestoneData","date","isDeadline","type","updateMilestone","deleteMilestone","getProjectSessions","getSession","sessionId","createLearningSession","sessionData","_sessionData$metrics","_sessionData$metrics2","_sessionData$metrics3","_sessionData$metrics4","_sessionData$metrics5","durationMinutes","motivation","learningObjective","awarenessLevel","confidenceLevel","energyLevel","performanceLevel","satisfactionLevel","addDocumentsToSession","documentData","resourceDocumentIds","testDocumentIds","updateSession","deleteSession","getSessionQuestions","createQuestion","questionData","question","answer","correction","evaluation","testDocumentId","references","updateQuestion","questionId","deleteQuestion","getEvents","milestones","map","milestone","id","createdAt","projects","allEvents","project","forEach","push","createEvent","eventData","updateEvent","eventId","deleteEvent","getTasks","sessions","session","_session$metrics","completed","timestamp","allTasks","_session$metrics2","createTask","taskData","updateTask","taskId","deleteTask","getHeatmapData","startDate","endDate","timeScale","heatmapData","color","hidden","order","Date","toISOString","split","dataUtils","sortProjects","sort","a","b","getVisibleProjects","filter","p","getHiddenProjects","documents","d","getResourceDocuments","getTestDocuments","s","getSessionsByDateRange","start","end","sessionDate","getTotalStudyTime","reduce","total","getAverageSessionMetrics","length","totals","acc","count","questions","q","getQuestionsByEvaluation","minEvaluation","getAverageQuestionEvaluation","sum","m","getProjectDeadline","find","getUpcomingMilestones","daysAhead","now","future","setDate","getDate","milestoneDate","getProjectTasks","getProjectEvents","getCompletedTasksCount","projectSessions","_session$metrics3","toDateString","targetDate","getEventsForDate","targetDateString","getFullYear","String","getMonth","padStart","milestoneDateString","getHeatmapIntensity","studyMinutes","maxMinutes","Math","min","getHeatmapCellColor","projectColor","intensity","hex","replace","r","parseInt","substr","g","opacity","max","formatDate","format","day","toString","month","longDay","longMonth","year","weekday","toLocaleDateString","dateDay","dateMonth","dateYear","toLocaleTimeString","hour","minute","dtDay","dtMonth","dtYear","time","defDay","defMonth","defYear","generateDateRange","centerDate","daysToShow","dates","center","i","hasDeadline","some","validateTaskEventAssignment","task","event","validateDocumentCategory","includes","toUpperCase","validateSessionMetrics","validKeys","key","undefined","validateProjectMetrics"],"sources":["/home/carruc/repos/eva-frontend/client/src/services/api.js"],"sourcesContent":["// API service for Heat of the Day application\n// Handles all backend communication and error management\n// EXPANDED to support PurpLLe backend features\n\nconst BASE_URL = '/api';\n\nclass ApiError extends Error {\n  constructor(message, status, data) {\n    super(message);\n    this.name = 'ApiError';\n    this.status = status;\n    this.data = data;\n  }\n}\n\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    let errorMessage = 'Network error occurred';\n    try {\n      const errorData = await response.json();\n      errorMessage = errorData.error || errorMessage;\n    } catch {\n      // If JSON parsing fails, use default message\n    }\n    throw new ApiError(errorMessage, response.status);\n  }\n\n  // Handle 204 No Content responses\n  if (response.status === 204) {\n    return null;\n  }\n\n  try {\n    return await response.json();\n  } catch {\n    throw new ApiError('Invalid response format', response.status);\n  }\n};\n\nconst makeRequest = async (url, options = {}) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  };\n\n  if (config.body && typeof config.body !== 'string') {\n    config.body = JSON.stringify(config.body);\n  }\n\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, config);\n    return await handleResponse(response);\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    throw new ApiError('Network connection failed', 0);\n  }\n};\n\nconst makeFormRequest = async (url, formData) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, {\n      method: 'POST',\n      body: formData,\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    throw new ApiError('Network connection failed', 0);\n  }\n};\n\nexport const apiService = {\n  // ======================================\n  // PROJECT ENDPOINTS - Enhanced with PurpLLe features\n  // ======================================\n  \n  async getProjects() {\n    return makeRequest('/projects');\n  },\n\n  async getProject(projectId) {\n    return makeRequest(`/projects/${projectId}`);\n  },\n\n  async createProject(projectData) {\n    return makeRequest('/projects', {\n      method: 'POST',\n      body: {\n        title: projectData.name, // Map 'name' to 'title' for PurpLLe compatibility\n        motivations: projectData.motivations || [],\n        overall_performance: projectData.metrics?.overallPerformance,\n        difficulty: projectData.metrics?.difficulty,\n        interest: projectData.metrics?.interest,\n        ...projectData\n      },\n    });\n  },\n\n  async updateProject(projectId, updates) {\n    return makeRequest(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: updates,\n    });\n  },\n\n  async deleteProject(projectId) {\n    return makeRequest(`/projects/${projectId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  // ======================================\n  // DOCUMENT MANAGEMENT ENDPOINTS - NEW\n  // ======================================\n  \n  async getProjectDocuments(projectId) {\n    return makeRequest(`/projects/${projectId}/documents`);\n  },\n\n  async getDocument(projectId, documentId) {\n    return makeRequest(`/projects/${projectId}/documents/${documentId}`);\n  },\n\n  async uploadDocument(projectId, file, category = 'RESOURCE') {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('category', category);\n    \n    return makeFormRequest(`/projects/${projectId}/documents`, formData);\n  },\n\n  async downloadDocument(projectId, documentId) {\n    const response = await fetch(`${BASE_URL}/projects/${projectId}/documents/${documentId}/download`);\n    if (!response.ok) {\n      throw new ApiError('Failed to download document', response.status);\n    }\n    return response.blob();\n  },\n\n  // ======================================\n  // MILESTONE ENDPOINTS - Enhanced from events\n  // ======================================\n  \n  async getProjectMilestones(projectId) {\n    return makeRequest(`/projects/${projectId}/milestones`);\n  },\n\n  async getMilestone(projectId, milestoneId) {\n    return makeRequest(`/projects/${projectId}/milestones/${milestoneId}`);\n  },\n\n  async createMilestone(projectId, milestoneData) {\n    return makeRequest(`/projects/${projectId}/milestones`, {\n      method: 'POST',\n      body: {\n        title: milestoneData.name,\n        date: milestoneData.date,\n        isDeadline: milestoneData.type === 'deadline',\n        ...milestoneData\n      },\n    });\n  },\n\n  async updateMilestone(projectId, milestoneId, updates) {\n    return makeRequest(`/projects/${projectId}/milestones/${milestoneId}`, {\n      method: 'PUT',\n      body: updates,\n    });\n  },\n\n  async deleteMilestone(projectId, milestoneId) {\n    return makeRequest(`/projects/${projectId}/milestones/${milestoneId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  // ======================================\n  // LEARNING SESSION ENDPOINTS - NEW\n  // ======================================\n  \n  async getProjectSessions(projectId) {\n    return makeRequest(`/projects/${projectId}/sessions`);\n  },\n\n  async getSession(projectId, sessionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}`);\n  },\n\n  async createLearningSession(projectId, sessionData) {\n    return makeRequest(`/projects/${projectId}/sessions`, {\n      method: 'POST',\n      body: {\n        durationMinutes: sessionData.durationMinutes,\n        motivation: sessionData.motivation,\n        learningObjective: sessionData.learningObjective,\n        metrics: {\n          awarenessLevel: sessionData.metrics?.awarenessLevel,\n          confidenceLevel: sessionData.metrics?.confidenceLevel,\n          energyLevel: sessionData.metrics?.energyLevel,\n          performanceLevel: sessionData.metrics?.performanceLevel,\n          satisfactionLevel: sessionData.metrics?.satisfactionLevel,\n        },\n        ...sessionData\n      },\n    });\n  },\n\n  async addDocumentsToSession(projectId, sessionId, documentData) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/documents`, {\n      method: 'POST',\n      body: {\n        resourceDocumentIds: documentData.resourceDocumentIds || [],\n        testDocumentIds: documentData.testDocumentIds || [],\n      },\n    });\n  },\n\n  async updateSession(projectId, sessionId, updates) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}`, {\n      method: 'PUT',\n      body: updates,\n    });\n  },\n\n  async deleteSession(projectId, sessionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  // ======================================\n  // QUESTION MANAGEMENT ENDPOINTS - NEW\n  // ======================================\n  \n  async getSessionQuestions(projectId, sessionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions`);\n  },\n\n  async createQuestion(projectId, sessionId, questionData) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions`, {\n      method: 'POST',\n      body: {\n        question: questionData.question,\n        answer: questionData.answer,\n        correction: questionData.correction,\n        evaluation: questionData.evaluation,\n        testDocumentId: questionData.testDocumentId,\n        resourceDocumentIds: questionData.resourceDocumentIds || [],\n        references: questionData.references || [],\n        ...questionData\n      },\n    });\n  },\n\n  async updateQuestion(projectId, sessionId, questionId, updates) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions/${questionId}`, {\n      method: 'PUT',\n      body: updates,\n    });\n  },\n\n  async deleteQuestion(projectId, sessionId, questionId) {\n    return makeRequest(`/projects/${projectId}/sessions/${sessionId}/questions/${questionId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  // ======================================\n  // LEGACY COMPATIBILITY - Map to PurpLLe\n  // ======================================\n  \n  // Events mapped to Milestones for backward compatibility\n  async getEvents(projectId = null) {\n    if (projectId) {\n      const milestones = await this.getProjectMilestones(projectId);\n      return milestones.map(milestone => ({\n        id: milestone.id,\n        name: milestone.title,\n        projectId: projectId,\n        date: milestone.date,\n        type: milestone.isDeadline ? 'deadline' : 'milestone',\n        createdAt: milestone.date\n      }));\n    }\n    \n    // For all events, we'd need to iterate through all projects\n    const projects = await this.getProjects();\n    const allEvents = [];\n    \n    for (const project of projects) {\n      const milestones = await this.getProjectMilestones(project.id);\n      milestones.forEach(milestone => {\n        allEvents.push({\n          id: milestone.id,\n          name: milestone.title,\n          projectId: project.id,\n          date: milestone.date,\n          type: milestone.isDeadline ? 'deadline' : 'milestone',\n          createdAt: milestone.date\n        });\n      });\n    }\n    \n    return allEvents;\n  },\n\n  async createEvent(eventData) {\n    return this.createMilestone(eventData.projectId, {\n      name: eventData.name,\n      date: eventData.date,\n      type: eventData.type\n    });\n  },\n\n  async updateEvent(eventId, updates) {\n    // This would require knowing the project ID, which we don't have in the legacy API\n    // For now, return a compatibility error\n    throw new ApiError('Event updates require migration to milestone-based API', 400);\n  },\n\n  async deleteEvent(eventId) {\n    // Similar issue - we need project context\n    throw new ApiError('Event deletion requires migration to milestone-based API', 400);\n  },\n\n  // Tasks mapped to Learning Sessions for backward compatibility\n  async getTasks(projectId = null) {\n    if (projectId) {\n      const sessions = await this.getProjectSessions(projectId);\n      return sessions.map(session => ({\n        id: session.id,\n        name: session.learningObjective || `Session ${session.durationMinutes}min`,\n        projectId: projectId,\n        eventId: null,\n        completed: session.metrics?.performanceLevel > 70, // Arbitrary completion threshold\n        createdAt: session.timestamp\n      }));\n    }\n    \n    const projects = await this.getProjects();\n    const allTasks = [];\n    \n    for (const project of projects) {\n      const sessions = await this.getProjectSessions(project.id);\n      sessions.forEach(session => {\n        allTasks.push({\n          id: session.id,\n          name: session.learningObjective || `Session ${session.durationMinutes}min`,\n          projectId: project.id,\n          eventId: null,\n          completed: session.metrics?.performanceLevel > 70,\n          createdAt: session.timestamp\n        });\n      });\n    }\n    \n    return allTasks;\n  },\n\n  async createTask(taskData) {\n    return this.createLearningSession(taskData.projectId, {\n      learningObjective: taskData.name,\n      durationMinutes: 30, // Default duration\n      motivation: 'Created from task'\n    });\n  },\n\n  async updateTask(taskId, updates) {\n    throw new ApiError('Task updates require migration to session-based API', 400);\n  },\n\n  async deleteTask(taskId) {\n    throw new ApiError('Task deletion requires migration to session-based API', 400);\n  },\n\n  // Analytics endpoints for heatmap visualization - Enhanced with learning data\n  async getHeatmapData(startDate = null, endDate = null, timeScale = 1) {\n    const projects = await this.getProjects();\n    const heatmapData = {};\n    \n    for (const project of projects) {\n      const sessions = await this.getProjectSessions(project.id);\n      \n      heatmapData[project.id] = {\n        project: {\n          id: project.id,\n          name: project.title,\n          color: project.color || '#3B82F6', // Default color\n          hidden: project.hidden || false,\n          order: project.order || 0,\n          createdAt: project.createdAt\n        },\n        data: {}\n      };\n      \n      // Convert sessions to heatmap data\n      sessions.forEach(session => {\n        const date = new Date(session.timestamp).toISOString().split('T')[0];\n        if (!heatmapData[project.id].data[date]) {\n          heatmapData[project.id].data[date] = 0;\n        }\n        // Use session duration as intensity metric\n        heatmapData[project.id].data[date] += session.durationMinutes;\n      });\n    }\n    \n    return heatmapData;\n  },\n};\n\n// Helper functions for data processing - ENHANCED\nexport const dataUtils = {\n  // Enhanced project utilities\n  sortProjects(projects) {\n    return [...projects].sort((a, b) => a.order - b.order);\n  },\n\n  getVisibleProjects(projects) {\n    return projects.filter(p => !p.hidden);\n  },\n\n  getHiddenProjects(projects) {\n    return projects.filter(p => p.hidden);\n  },\n\n  // Document utilities - NEW\n  getProjectDocuments(documents, projectId) {\n    return documents.filter(d => d.projectId === projectId);\n  },\n\n  getResourceDocuments(documents) {\n    return documents.filter(d => d.category === 'RESOURCE');\n  },\n\n  getTestDocuments(documents) {\n    return documents.filter(d => d.category === 'TEST');\n  },\n\n  // Learning session utilities - NEW\n  getProjectSessions(sessions, projectId) {\n    return sessions.filter(s => s.projectId === projectId);\n  },\n\n  getSessionsByDateRange(sessions, startDate, endDate) {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    return sessions.filter(session => {\n      const sessionDate = new Date(session.timestamp);\n      return sessionDate >= start && sessionDate <= end;\n    });\n  },\n\n  getTotalStudyTime(sessions) {\n    return sessions.reduce((total, session) => total + session.durationMinutes, 0);\n  },\n\n  getAverageSessionMetrics(sessions) {\n    if (sessions.length === 0) return null;\n    \n    const totals = sessions.reduce((acc, session) => {\n      if (session.metrics) {\n        acc.awarenessLevel += session.metrics.awarenessLevel || 0;\n        acc.confidenceLevel += session.metrics.confidenceLevel || 0;\n        acc.energyLevel += session.metrics.energyLevel || 0;\n        acc.performanceLevel += session.metrics.performanceLevel || 0;\n        acc.satisfactionLevel += session.metrics.satisfactionLevel || 0;\n        acc.count += 1;\n      }\n      return acc;\n    }, {\n      awarenessLevel: 0,\n      confidenceLevel: 0,\n      energyLevel: 0,\n      performanceLevel: 0,\n      satisfactionLevel: 0,\n      count: 0\n    });\n\n    if (totals.count === 0) return null;\n\n    return {\n      awarenessLevel: totals.awarenessLevel / totals.count,\n      confidenceLevel: totals.confidenceLevel / totals.count,\n      energyLevel: totals.energyLevel / totals.count,\n      performanceLevel: totals.performanceLevel / totals.count,\n      satisfactionLevel: totals.satisfactionLevel / totals.count,\n    };\n  },\n\n  // Question utilities - NEW\n  getSessionQuestions(questions, sessionId) {\n    return questions.filter(q => q.sessionId === sessionId);\n  },\n\n  getQuestionsByEvaluation(questions, minEvaluation = 0) {\n    return questions.filter(q => q.evaluation >= minEvaluation);\n  },\n\n  getAverageQuestionEvaluation(questions) {\n    if (questions.length === 0) return 0;\n    const total = questions.reduce((sum, q) => sum + (q.evaluation || 0), 0);\n    return total / questions.length;\n  },\n\n  // Milestone utilities - Enhanced from events\n  getProjectMilestones(milestones, projectId) {\n    return milestones.filter(m => m.projectId === projectId);\n  },\n\n  getProjectDeadline(milestones, projectId) {\n    return milestones.find(m => m.projectId === projectId && m.isDeadline);\n  },\n\n  getUpcomingMilestones(milestones, daysAhead = 30) {\n    const now = new Date();\n    const future = new Date();\n    future.setDate(now.getDate() + daysAhead);\n    \n    return milestones.filter(m => {\n      const milestoneDate = new Date(m.date);\n      return milestoneDate >= now && milestoneDate <= future;\n    }).sort((a, b) => new Date(a.date) - new Date(b.date));\n  },\n\n  // Legacy compatibility\n  getProjectTasks(sessions, projectId) {\n    return this.getProjectSessions(sessions, projectId);\n  },\n\n  getProjectEvents(milestones, projectId) {\n    return this.getProjectMilestones(milestones, projectId);\n  },\n\n  getCompletedTasksCount(sessions, projectId, date) {\n    const projectSessions = this.getProjectSessions(sessions, projectId);\n    return projectSessions.filter(session => {\n      if (!session.metrics?.performanceLevel || session.metrics.performanceLevel <= 70) return false;\n      const sessionDate = new Date(session.timestamp).toDateString();\n      const targetDate = new Date(date).toDateString();\n      return sessionDate === targetDate;\n    }).length;\n  },\n\n  getEventsForDate(milestones, date) {\n    const targetDate = new Date(date);\n    const targetDateString = targetDate.getFullYear() + '-' + \n                           String(targetDate.getMonth() + 1).padStart(2, '0') + '-' + \n                           String(targetDate.getDate()).padStart(2, '0');\n    \n    return milestones.filter(milestone => {\n      const milestoneDate = new Date(milestone.date);\n      const milestoneDateString = milestoneDate.getFullYear() + '-' + \n                                 String(milestoneDate.getMonth() + 1).padStart(2, '0') + '-' + \n                                 String(milestoneDate.getDate()).padStart(2, '0');\n      \n      return milestoneDateString === targetDateString;\n    });\n  },\n\n  // Enhanced heatmap utilities\n  getHeatmapIntensity(studyMinutes, maxMinutes = 180) { // 3 hours max\n    return Math.min(studyMinutes / maxMinutes, 1);\n  },\n\n  getHeatmapCellColor(projectColor, intensity) {\n    const hex = projectColor.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    const opacity = Math.max(0.1, intensity);\n    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n  },\n\n  // Date formatting utilities\n  formatDate(date, format = 'short') {\n    const d = new Date(date);\n    \n    switch (format) {\n      case 'short':\n        const day = d.getDate().toString().padStart(2, '0');\n        const month = (d.getMonth() + 1).toString().padStart(2, '0');\n        return `${day}/${month}`;\n      case 'long':\n        const longDay = d.getDate().toString().padStart(2, '0');\n        const longMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const year = d.getFullYear();\n        const weekday = d.toLocaleDateString('en-US', { weekday: 'long' });\n        return `${weekday}, ${longDay}/${longMonth}/${year}`;\n      case 'date-only':\n        const dateDay = d.getDate().toString().padStart(2, '0');\n        const dateMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const dateYear = d.getFullYear();\n        return `${dateDay}/${dateMonth}/${dateYear}`;\n      case 'time':\n        return d.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      case 'datetime':\n        const dtDay = d.getDate().toString().padStart(2, '0');\n        const dtMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const dtYear = d.getFullYear();\n        const time = d.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n        return `${dtDay}/${dtMonth}/${dtYear} ${time}`;\n      default:\n        const defDay = d.getDate().toString().padStart(2, '0');\n        const defMonth = (d.getMonth() + 1).toString().padStart(2, '0');\n        const defYear = d.getFullYear();\n        return `${defDay}/${defMonth}/${defYear}`;\n    }\n  },\n\n  generateDateRange(centerDate, timeScale, daysToShow = 30) {\n    const dates = [];\n    const center = new Date(centerDate);\n    \n    const startDate = new Date(center);\n    startDate.setDate(center.getDate() - 7);\n    \n    for (let i = 0; i < daysToShow; i += timeScale) {\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      dates.push(new Date(date));\n    }\n    \n    return dates;\n  },\n\n  // Validation utilities\n  hasDeadline(milestones, projectId) {\n    return milestones.some(m => m.projectId === projectId && m.isDeadline);\n  },\n\n  validateTaskEventAssignment(task, event) {\n    if (!event) return true;\n    return task.projectId === event.projectId;\n  },\n\n  // New validation utilities for PurpLLe features\n  validateDocumentCategory(category) {\n    return ['RESOURCE', 'TEST'].includes(category.toUpperCase());\n  },\n\n  validateSessionMetrics(metrics) {\n    const validKeys = ['awarenessLevel', 'confidenceLevel', 'energyLevel', 'performanceLevel', 'satisfactionLevel'];\n    \n    for (const key of validKeys) {\n      if (metrics[key] !== undefined && (metrics[key] < 0 || metrics[key] > 100)) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  validateProjectMetrics(metrics) {\n    const validKeys = ['overallPerformance', 'difficulty', 'interest'];\n    \n    for (const key of validKeys) {\n      if (metrics[key] !== undefined && (metrics[key] < 0 || metrics[key] > 100)) {\n        return false;\n      }\n    }\n    return true;\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}